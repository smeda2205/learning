Introduction to Concurrent Programming and Threads:
----------------------------------------------------

In concurrent programming, there are two basic units of execution. 
	1. processes.
	2. threads.
	
In Java, Concurrent programming mostly concerned with threads. However, processes are also important.

A computer system normally has many active processes and threads. 
This is true even in systems that only have a single execution core, and thus only have one thread 
actually executing at any given moment.

Processing time for a single core is shared among processes and threads 
through an OS feature called time slicing.

It's becoming more and more common for computer systems to have multiple processors 
or processors with multiple execution cores. This greatly enhances a system's capacity for 
concurrent execution of processes and threads — but concurrency is possible even on simple 
systems, without multiple processors or execution cores.

Processes:
-----------
A process has a self-contained execution environment. 
A process generally has a complete, private set of basic run-time resources; 
in particular, each process has its own memory space.

Processes are often seen as synonymous with programs or applications. 
However, what the user sees as a single application may in fact be a set of cooperating processes. 
To facilitate communication between processes, most operating systems support 
Inter Process Communication (IPC) resources, such as pipes and sockets. 
IPC is used not just for communication between processes on the same system, but processes on different systems.

Most implementations of the Java virtual machine run as a single process. 
A Java application can create additional processes using a ProcessBuilder object.

Threads:
--------
Threads are sometimes called lightweight processes. Both processes and threads provide an execution 
environment, but creating a new thread requires fewer resources than creating a new process.

Threads exist within a process — every process has at least one. Threads share the process's resources, 
including memory and open files. This makes for efficient, but potentially problematic, communication.

Multi-threaded execution is an essential feature of the Java platform. 
Every application has at least one thread — or several, if you count "system" threads that do things 
like memory management and signal handling. 
But from the application programmer's point of view, you start with just one thread, called 
the main thread. This thread has the ability to create additional threads.
 
Thread in Java:
=================
	1. Each thread is associated with an instance of the class Thread.
	
	2. There are two basic strategies of using Thread objects to create a concurrent application.
		a. To directly control thread creation and management, simply instantiate Thread each time 
			the application needs to instantiate an asynchronous task.
		b. To abstract thread management from the rest of your application, pass the application's
			tasks to an executor.
			
	In this Project, we document the use of Thread Objects. Executors are discussed with other high-level
	concurrency objects in JavaThreadsAdvanced Project.
	 
	An application that creates an instance of Thread must provide the code that will run in that thread. 
	There are two ways to do this:
		1. Provide a Runnable Object.
		2. Subclass Thread.
		
	Both the approches invoke Thread.start in order to start the new Thread.
	
	Which of these idioms should you use?
	-------------------------------------
		The first idiom, which employes a Runnable object, is more general, because the Runnable object can subclass a class other than Thread.
		The second idiom is easier to use in simple applications, but is limited by the fact that your task class must be a descendant of Thread.
		
		The first approach seperates the Runnable Task from the Thread object that executes the task.
		Not only this approach is more flexible, but it is applicable to the high-level thread APIs covered later.
		
		The Thread class defines a number of methods useful for thread management. These include 
		static methods, which provide information about, or affect the status of, the thread
		invoking the method.
		
		The other methods are invoked from other threads involved in managing the thread and Thread object.	  		
		
	Pausing the Thread from execution:
	----------------------------------
		Thread.sleep() causes the current thread to suspend execution for a specified period.
		
		This is an efficient means of making processor time available to the other threads of an 
		application or other applications that might be running on a computer system.
		
		The sleep method can also be used for pacing, as shown in the example 'B1_SleepExample', and waiting for another thread
		with duties that are understood to have time requirements.
		
		Two overloaded version of sleep are provided:
			1. that specifies the sleep time to the millisecond.
			2. that specifies the sleep time to the nanosecond.
		However, these sleep times are not guaranteed to be precise, because they are limited 
		by the facilities provided by the underlying OS.
		
		Also, the sleep period can be terminated by interrupts. 
		In any case, you can not assume that invoking sleep will suspend the thread for precisely the time period specified.
		
		sleep method throws InterruptedException, when another thread interrupts the current thread while sleep is active.
		
	Interrupts:
	-----------
		An interrupt is an indication to a thread that it should stop what it is doing and do something else.
		Its upto the programmer to decide exactly how a thread responds to an interrupt, but it is very common for the thread to terminate.
		
		A thread sends an interrupt by invoking interrupt() on the Thread object for the thread to be interrupted. For the interrupt mechanism to work 
		correctly, the interrupted thread must support its own interruption.
		
		How does a thread support its own interruption?
		-----------------------------------------------
			This depends on what it is currently doing. If the thread is frequently invoking methods that throw InterruptedException, it simply 
			returns from the run method after it catches that exception. 
			
			For example, suppose the central message loop in the B1_SleepExample example were in the run method of a thread's Runnable object. 
			Then it might be modified as follows to support interrupts:
	
					for (int i = 0; i < importantInfo.length; i++) {
					    // Pause for 4 seconds
					    try {
					        Thread.sleep(4000);
					    } catch (InterruptedException e) {
					        // We've been interrupted: no more messages.
					        return;
					    }
					    // Print a message
					    System.out.println(importantInfo[i]);
					}
	
			Many methods that throw InterruptedException, such as sleep, are designed to cancel their current operation and return immediately when an interrupt is received.
			
			What if a thread goes a long time without invoking a method that throws InterruptedException? Then it must periodically invoke Thread.interrupted, which returns true if an interrupt has been received. For example:
			
					for (int i = 0; i < inputs.length; i++) {
					    heavyCrunch(inputs[i]);
					    if (Thread.interrupted()) {
					        // We've been interrupted: no more crunching.
					        return;
					    }
					}
	
			In this simple example, the code simply tests for the interrupt and exits the thread if one has been received. 
			In more complex applications, it might make more sense to throw an InterruptedException:
					
					if (Thread.interrupted()) {
					    throw new InterruptedException();
					}
			
			This allows interrupt handling code to be centralized in a catch clause.
	
		The Interrupt Status Flag:
		--------------------------
			The interrupt mechanism is implemented using an internal flag known as the interrupt status. Invoking Thread.interrupt sets this flag. 
			
			When a thread checks for an interrupt by invoking the static method Thread.interrupted, interrupt status is cleared. 
			The non-static isInterrupted method, which is used by one thread to query the interrupt status of another, does not change the interrupt status flag.
		
			By convention, any method that exits by throwing an InterruptedException clears interrupt status when it does so. However, it's always possible that interrupt 
			status will immediately be set again, by another thread invoking interrupt.
			
	Joins:
	------	
		The 'join()' method allows one thread to wait for the completion of another. 
		
		If t is a Thread object whose thread is currently executing, 
			t.join();
		causes the current thread to pause execution until t's thread terminates.
		
		Overloads of join allow the programmer to specify a waiting period. However, as with sleep, join is dependent on the OS for timing, so you 
		should not assume that join will wait exactly as long as you specify.
		
		Like sleep, join responds to an interrupt by exiting with an InterruptedException.
		
		
Synchronization:
================	
	Threads communicate primarily by sharing access to fields and the objects reference fields refer to. This form of communication is extremely efficient, but makes
	two kinds of errors possible: thread interference and memory consistency errors. The tool needed to prevent these errors is synchronization.
	
	Thread Interference:
	--------------------
		Describes how errors are introduced when multiple threads access shared data.
		
		Consider a simple class called Counter
			class Counter {
			    private int c = 0;
			
			    public void increment() {
			        c++;
			    }
			
			    public void decrement() {
			        c--;
			    }
			
			    public int value() {
			        return c;
			    }
			
			}
		Counter is designed so that each invocation of increment will add 1 to c, and each invocation of decrement will subtract 1 from c. 
		However, if a Counter object is referenced from multiple threads, interference between threads may prevent this from happening as expected.

		Interference happens when two operations, running in different threads, but acting on the same data, interleave. 
		This means that the two operations consist of multiple steps, and the sequences of steps overlap.

		It might not seem possible for operations on instances of Counter to interleave, since both operations on c are single, simple statements. 
		However, even simple statements can translate to multiple steps by the virtual machine. We won't examine the specific steps the 
		virtual machine takes — it is enough to know that the single expression c++ can be decomposed into three steps:

			1. Retrieve the current value of c.
			2. Increment the retrieved value by 1.
			3. Store the incremented value back in c.
	
		The expression c-- can be decomposed the same way, except that the second step decrements instead of increments.
		
		Suppose Thread A invokes increment at about the same time Thread B invokes decrement. If the initial value of c is 0, their interleaved actions might follow this sequence:

			Thread A: Retrieve c.
			Thread B: Retrieve c.
			Thread A: Increment retrieved value; result is 1.
			Thread B: Decrement retrieved value; result is -1.
			Thread A: Store result in c; c is now 1.
			Thread B: Store result in c; c is now -1.

		Thread A's result is lost, overwritten by Thread B. This particular interleaving is only one possibility. Under different circumstances it might be 
		Thread B's result that gets lost, or there could be no error at all. Because they are unpredictable, thread interference bugs can be difficult to detect and fix.
		
		
	Memory Consistency Errors:
	--------------------------
		Describes errors that result from inconsistent views of shared memory.
		
	Synchronized Methods:
	---------------------
		Describes a simple idiom that can effectively prevent thread interference and memory consistency errors.
		
		
	Implicit Locks and Synchronization:
	-----------------------------------
		Describes a more general synchronization idiom, and describes how synchronization is based on implicit locks.
		
	Atomic Access:
	--------------
		Talks about the general idea of operations that can't be interfered with by other threads.
		
		
	
	